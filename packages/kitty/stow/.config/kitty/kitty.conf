# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      monospace
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. The easiest way to select fonts is to run the `kitten
#: choose-fonts` command which will present a nice UI for you to
#: select the fonts you want with previews and support for selecting
#: variable fonts and font features. If you want to learn to select
#: fonts manually, read the font specification syntax
#: <https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-
#: syntax>.

# font_size 11.0
font_size 18.0

#: Font size (in pts).

# force_ltr no

#: kitty does not support BIDI (bidirectional text), however, for RTL
#: scripts, words are automatically displayed in RTL. That is to say,
#: in an RTL script, the words "HELLO WORLD" display in kitty as
#: "WORLD HELLO", and if you try to select a substring of an RTL-
#: shaped string, you will get the character that would be there had
#: the string been LTR. For example, assuming the Hebrew word ירושלים,
#: selecting the character that on the screen appears to be ם actually
#: writes into the selection buffer the character י. kitty's default
#: behavior is useful in conjunction with a filter to reverse the word
#: order, however, if you wish to manipulate RTL glyphs, it can be
#: very challenging to work with, so this option is provided to turn
#: it off. Furthermore, this option can be used with the command line
#: program GNU FriBidi <https://github.com/fribidi/fribidi#executable>
#: to get BIDI support, because it will force kitty to always treat
#: the text as LTR, which FriBidi expects for terminals.

# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name

# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Usually, for Private Use Unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. Using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: This option can be specified multiple times. The syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

# disable_ligatures never

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them. You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features option.

# font_features

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. Note
#: that for the main fonts, features can be specified when selecting
#: the font using the choose-fonts kitten. This setting is useful for
#: fallback fonts.

#: Some fonts might have features worthwhile in a terminal. For
#: example, Fira Code includes a discretionary feature, zero, which in
#: that font changes the appearance of the zero (0), to make it more
#: easily distinguishable from Ø. Fira Code also includes other
#: discretionary features known as Stylistic Sets which have the tags
#: ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, font features are first read from the FontConfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use the `fc-scan file.ttf`
#: command on Linux or the `Font Book tool on macOS
#: <https://apple.stackexchange.com/questions/79875/how-can-i-get-the-
#: postscript-name-of-a-ttf-font-installed-in-os-x>`__.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero in the bold font::

#:     font_features FiraCode-Bold +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

# modify_font

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

# box_drawing_scale 0.001, 1, 1.5, 2

#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.

# undercurl_style thin-sparse

#: The style with which undercurls are rendered. This option takes the
#: form (thin|thick)-(sparse|dense). Thin and thick control the
#: thickness of the undercurl. Sparse and dense control how often the
#: curl oscillates. With sparse the curl will peak once per character,
#: with dense twice. Changing this option dynamically via reloading
#: the config or remote control is undefined.

# underline_exclusion 1

#: By default kitty renders gaps in underlines when they overlap with
#: descenders (the parts of letters below the baseline, such as for y,
#: q, p etc.). This option controls the thickness of the gaps. It can
#: be either a unitless number in which case it is a fraction of the
#: underline thickness as specified in the font or it can have a
#: suffix of px for pixels or pt for points. Set to zero to disable
#: the gaps. Changing this option dynamically via reloading the config
#: or remote control is undefined.

# text_composition_strategy platform

#: Control how kitty composites text glyphs onto the background color.
#: The default value of platform tries for text rendering as close to
#: "native" for the platform kitty is running on as possible.

#: A value of legacy uses the old (pre kitty 0.28) strategy for how
#: glyphs are composited. This will make dark text on light
#: backgrounds look thicker and light text on dark backgrounds
#: thinner. It might also make some text appear like the strokes are
#: uneven.

#: You can fine tune the actual contrast curve used for glyph
#: composition by specifying up to two space-separated numbers for
#: this setting.

#: The first number is the gamma adjustment, which controls the
#: thickness of dark text on light backgrounds. Increasing the value
#: will make text appear thicker. The default value for this is 1.0 on
#: Linux and 1.7 on macOS. Valid values are 0.01 and above. The result
#: is scaled based on the luminance difference between the background
#: and the foreground. Dark text on light backgrounds receives the
#: full impact of the curve while light text on dark backgrounds is
#: affected very little.

#: The second number is an additional multiplicative contrast. It is
#: percentage ranging from 0 to 100. The default value is 0 on Linux
#: and 30 on macOS.

#: If you wish to achieve similar looking thickness in light and dark
#: themes, a good way to experiment is start by setting the value to
#: 1.0 0 and use a dark theme. Then adjust the second parameter until
#: it looks good. Then switch to a light theme and adjust the first
#: parameter until the perceived thickness matches the dark theme.

# text_fg_override_threshold 0

#: A setting to prevent low contrast between foreground and background
#: colors. Useful when working with applications that use colors that
#: do not contrast well with your preferred color scheme. The default
#: value is 0, which means no color overriding is performed. There are
#: two modes of operation:

#: A value with the suffix ratio represents the minimum accepted
#: contrast ratio between the foreground and background color.
#: Possible values range from 0.0 ratio to 21.0 ratio. For example, to
#: meet WCAG level AA
#: <https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines>
#: a value of 4.5 ratio can be provided. The algorithm is implemented
#: using HSLuv <https://www.hsluv.org/> which enables it to change the
#: perceived lightness of a color just as much as needed without
#: really changing its hue and saturation.

#: A value with the suffix % represents the minimum accepted
#: difference in luminance between the foreground and background
#: color, below which kitty will override the foreground color. It is
#: percentage ranging from 0 % to 100 %. If the difference in
#: luminance of the foreground and background is below this threshold,
#: the foreground color will be set to white if the background is dark
#: or black if the background is light.

#: WARNING: Some programs use characters (such as block characters)
#: for graphics display and may expect to be able to set the
#: foreground and background to the same color (or similar colors). If
#: you see unexpected stripes, dots, lines, incorrect color, no color
#: where you expect color, or any kind of graphic display problem try
#: setting text_fg_override_threshold to 0 to see if this is the cause
#: of the problem or consider using the ratio mode of operation
#: described above instead of the % mode of operation.

#: }}}

#: Text cursor customization {{{

# cursor #cccccc

#: Default text cursor color. If set to the special value none the
#: cursor will be rendered with a "reverse video" effect. Its color
#: will be the color of the text in the cell it is over and the text
#: will be rendered with the background color of the cell. Note that
#: if the program running in the terminal sets a cursor color, this
#: takes precedence. Also, the cursor colors are modified if the cell
#: background and foreground colors have very low contrast. Note that
#: some themes set this value, so if you want to override it, place
#: your value after the lines where the theme file is included.

# cursor_text_color #111111

#: The color of text under the cursor. If you want it rendered with
#: the background color of the cell underneath instead, use the
#: special keyword: `background`. Note that if cursor is set to none
#: then this option is ignored. Note that some themes set this value,
#: so if you want to override it, place your value after the lines
#: where the theme file is included.

# cursor_shape block

#: The cursor shape can be one of block, beam, underline. Note that
#: when reloading the config this will be changed only if the cursor
#: shape has not been set by the program running in the terminal. This
#: sets the default cursor shape, applications running in the terminal
#: can override it. In particular, shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> in kitty sets
#: the cursor shape to beam at shell prompts. You can avoid this by
#: setting shell_integration to no-cursor.

# cursor_shape_unfocused hollow

#: Defines the text cursor shape when the OS window is not focused.
#: The unfocused cursor shape can be one of block, beam, underline,
#: hollow and unchanged (leave the cursor shape as it is).

# cursor_beam_thickness 1.5

#: The thickness of the beam cursor (in pts).

# cursor_underline_thickness 2.0

#: The thickness of the underline cursor (in pts).

# cursor_blink_interval -1

#: The interval to blink the cursor (in seconds). Set to zero to
#: disable blinking. Negative values mean use system default. Note
#: that the minimum interval will be limited to repaint_delay. You can
#: also animate the cursor blink by specifying an easing function. For
#: example, setting this to option to 0.5 ease-in-out will cause the
#: cursor blink to be animated over a second, in the first half of the
#: second it will go from opaque to transparent and then back again
#: over the next half. You can specify different easing functions for
#: the two halves, for example: -1 linear ease-out. kitty supports all
#: the CSS easing functions <https://developer.mozilla.org/en-
#: US/docs/Web/CSS/easing-function>. Note that turning on animations
#: uses extra power as it means the screen is redrawn multiple times
#: per blink interval. See also, cursor_stop_blinking_after.

# cursor_stop_blinking_after 15.0

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity. Set to zero to never stop blinking.

# cursor_trail 0

#: Set this to a value larger than zero to enable a "cursor trail"
#: animation. This is an animation that shows a "trail" following the
#: movement of the text cursor. It makes it easy to follow large
#: cursor jumps and makes for a cool visual effect of the cursor
#: zooming around the screen. The actual value of this option controls
#: when the animation is triggered. It is a number of milliseconds.
#: The trail animation only follows cursors that have stayed in their
#: position for longer than the specified number of milliseconds. This
#: prevents trails from appearing for cursors that rapidly change
#: their positions during UI updates in complex applications. See
#: cursor_trail_decay to control the animation speed and
#: cursor_trail_start_threshold to control when a cursor trail is
#: started.

# cursor_trail_decay 0.1 0.4

#: Controls the decay times for the cursor trail effect when the
#: cursor_trail is enabled. This option accepts two positive float
#: values specifying the fastest and slowest decay times in seconds.
#: The first value corresponds to the fastest decay time (minimum),
#: and the second value corresponds to the slowest decay time
#: (maximum). The second value must be equal to or greater than the
#: first value. Smaller values result in a faster decay of the cursor
#: trail. Adjust these values to control how quickly the cursor trail
#: fades away.

# cursor_trail_start_threshold 2

#: Set the distance threshold for starting the cursor trail. This
#: option accepts a positive integer value that represents the minimum
#: number of cells the cursor must move before the trail is started.
#: When the cursor moves less than this threshold, the trail is
#: skipped, reducing unnecessary cursor trail animation.

#: }}}

#: Scrollback {{{

# scrollback_lines 2000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_indicator_opacity 1.0

#: The opacity of the scrollback indicator which is a small colored
#: rectangle that moves along the right hand side of the window as you
#: scroll, indicating what fraction you have scrolled. The default is
#: one which means fully opaque, aka visible. Set to a value between
#: zero and one to make the indicator less visible.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

# scrollback_pager_history_size 0

#: Separate scrollback history size (in MB), used only for browsing
#: the scrollback buffer with pager. This separate buffer is not
#: available for interactive scrolling but will be piped to the pager
#: program when viewing scrollback buffer in a separate window. The
#: current implementation stores the data in UTF-8, so approximately
#: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_fill_enlarged_window no

#: Fill new space with lines from the scrollback buffer after
#: enlarging a window.

# wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Mouse {{{

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

#: By default, once the cursor is hidden, it is immediately unhidden
#: on any further mouse events.

#: Two formats are supported:
#:  - <hide-wait>
#:  - <hide-wait> <unhide-wait> <unhide-threshold> <scroll-unhide>

#: To change the unhide behavior, the optional parameters <unhide-
#: wait>, <unhide-threshold>, and <scroll-unhide> may be set.

#: <unhide-wait>
#:     Waits for the specified number of seconds after mouse events before unhiding the
#:     mouse cursor. Set to zero to unhide mouse cursor immediately on mouse activity.
#:     This is useful to prevent the mouse cursor from unhiding on accidental swipes on
#:     the trackpad.

#: <unhide-threshold>
#:     Sets the threshold of mouse activity required to unhide the mouse cursor, when
#:     the <unhide-wait> option is non-zero. When <unhide-wait> is zero, this has no
#:     effect.

#:     For example, if <unhide-threshold> is 40 and <unhide-wait> is 2.5, when kitty
#:     detects a mouse event, it records the number of mouse events in the next 2.5
#:     seconds, and checks if that exceeds 40 * 2.5 = 100. If it does, then the mouse
#:     cursor is unhidden, otherwise nothing happens.

#: <scroll-unhide>
#:     Controls what mouse events may unhide the mouse cursor. If enabled, both scroll
#:     and movement events may unhide the cursor. If disabled, only mouse movements can
#:     unhide the cursor.

#: Examples of valid values:
#:  - 0.0
#:  - 1.0
#:  - -1.0
#:  - 0.1 3.0 40 yes

# url_color #0087bd
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed.

# open_url_with default

#: The program to open clicked URLs. The special value default will
#: first look for any URL handlers defined via the open_actions
#: <https://sw.kovidgoyal.net/kitty/open_actions/> facility and if non
#: are found, it will use the Operating System's default URL handler
#: (open on macOS and xdg-open on Linux).

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable. See also the
#: underline_hyperlinks option to control how hyperlinks (as opposed
#: to plain text URLs) are displayed.

# url_excluded_characters

#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters that are
#: legal in URLs are allowed. Additionally, newlines are allowed (but
#: stripped). This is to accommodate programs such as mutt that add
#: hard line breaks even for continued lines. \n can be added to this
#: option to disable this behavior. Special characters can be
#: specified using backslash escapes, to specify a backslash use a
#: double backslash.

# show_hyperlink_targets no

#: When the mouse hovers over a terminal hyperlink, show the actual
#: URL that will be activated when the hyperlink is clicked.

# underline_hyperlinks hover

#: Control how hyperlinks are underlined. They can either be
#: underlined on mouse hover, always (i.e. permanently underlined) or
#: never which means that kitty will not apply any underline styling
#: to hyperlinks. Note that the value of always only applies to real
#: (OSC 8) hyperlinks not text that is detected to be a URL on mouse
#: hover. Uses the url_style and url_color settings for the underline
#: style. Note that reloading the config and changing this value
#: to/from always will only affect text subsequently received by
#: kitty.

# copy_on_select no

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. Useful on platforms such as macOS that do not
#: have the concept of primary selection. You can instead specify a
#: name such as a1 to copy to a private kitty buffer. Map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. For example::

#:     copy_on_select a1
#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# clear_selection_on_clipboard_loss no

#: When the contents of the clipboard no longer reflect the current
#: selection, clear it. This is primarily useful on platforms such as
#: Linux where selecting text automatically copies it to a special
#: "primary selection" clipboard or if you have copy_on_select set to
#: clipboard.

#: Note that on macOS the system does not provide notifications when
#: the clipboard owner is changed, so there, copying to clipboard in a
#: non-kitty application will not clear selections even if
#: copy_on_select is enabled.

# paste_actions quote-urls-at-prompt,confirm

#: A comma separated list of actions to take when pasting text into
#: the terminal. The supported paste actions are:

#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs shell_integration).
#: replace-dangerous-control-codes
#:     Replace dangerous control codes from pasted text, without confirmation.
#: replace-newline
#:     Replace the newline character from pasted text, without confirmation.
#: confirm:
#:     Confirm the paste if the text to be pasted contains any terminal control codes
#:     as this can be dangerous, leading to code execution if the shell/program running
#:     in the terminal does not properly handle these.
#: confirm-if-large
#:     Confirm the paste if it is very large (larger than 16KB) as pasting
#:     large amounts of text into shells can be very slow.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.
#: no-op:
#:     Has no effect.

# strip_trailing_spaces never

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. A value of always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the Unicode database will be matched.

# select_by_word_characters_forward

#: Characters considered part of a word when extending the selection
#: forward on double clicking. In addition to these characters any
#: character that is marked as an alphanumeric character in the
#: Unicode database will be matched.

#: If empty (default) select_by_word_characters will be used for both
#: directions.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around. On macOS, this will also cause the OS Window under
#: the mouse to be focused automatically when the mouse enters it.

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

# default_pointer_shape beam

#: The default shape of the mouse pointer.

# pointer_shape_when_dragging beam crosshair

#: The default shape of the mouse pointer when dragging across text.
#: The optional second value sets the shape when dragging in
#: rectangular selection mode.

#: Mouse actions {{{

#: Mouse buttons can be mapped to perform arbitrary actions. The
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. For example: ctrl+shift+left refers to
#: holding the Ctrl+Shift keys while clicking with the left mouse
#: button. The value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. The values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. Note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap a button, map it to nothing. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed

#: See all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: Remove all mouse action definitions up to this point. Useful, for
#: instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with Ctrl+Shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#: Select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line. If you
#::  would like to select the word at the point and then extend to the
#::  rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line even when
#::  grabbed. If you would like to select the word at the point and
#::  then extend to the rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: }}}

#: Performance tuning {{{

# repaint_delay 10

#: Delay between screen updates (in milliseconds). Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS, you have to
#: either set sync_to_monitor to no or use a monitor with a high
#: refresh rate. Also, to minimize latency when there is pending input
#: to be processed, this option is ignored.

# input_delay 3

#: Delay before input from the program running in the terminal is
#: processed (in milliseconds). Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.
#: This setting is ignored when the input buffer is almost full.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents screen tearing
#: <https://en.wikipedia.org/wiki/Screen_tearing> when scrolling.
#: However, it limits the rendering speed to the refresh rate of your
#: monitor. With a very high speed mouse/high keyboard repeat rate,
#: you may notice some slight input latency. If so, set this to no.

#: }}}

#: Terminal bell {{{

# enable_audio_bell yes

#: The audio bell. Useful to disable it in environments that require
#: silence.

# visual_bell_duration 0.0

#: The visual bell duration (in seconds). Flash the screen when a bell
#: occurs for the specified number of seconds. Set to zero to disable.
#: The flash is animated, fading in and out over the specified
#: duration. The easing function used for the fading can be
#: controlled. For example, 2.0 linear will casuse the flash to fade
#: in and out linearly. The default if unspecified is to use ease-in-
#: out which fades slowly at the start, middle and end. You can
#: specify different easing functions for the fade-in and fade-out
#: parts, like this: 2.0 ease-in linear. kitty supports all the CSS
#: easing functions <https://developer.mozilla.org/en-
#: US/docs/Web/CSS/easing-function>.

# visual_bell_color none

#: The color used by visual bell. Set to none will fall back to
#: selection background color. If you feel that the visual bell is too
#: bright, you can set it to a darker color.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on Linux.

# bell_on_tab "🔔 "

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has a bell. If you want to use leading
#: or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

#: For backwards compatibility, values of yes, y and true are
#: converted to the default bell symbol and no, n, false and none are
#: converted to the empty string.

# command_on_bell none

#: Program to run when a bell occurs. The environment variable
#: KITTY_CHILD_CMDLINE can be used to get the program running in the
#: window in which the bell occurred.

# bell_path none

#: Path to a sound file to play as the bell sound. If set to none, the
#: system default bell sound is used. Must be in a format supported by
#: the operating systems sound API, such as WAV or OGA on Linux
#: (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound).

# linux_bell_theme __custom

#: The XDG Sound Theme kitty will use to play the bell sound. On
#: Wayland, when the compositor supports it, it is asked to play the
#: system default bell sound, and this setting has no effect.
#: Otherwise, defaults to the custom theme name specified in the XDG
#: Sound theme specification
#: <https://specifications.freedesktop.org/sound-theme-
#: spec/latest/sound_lookup.html>, falling back to the default
#: freedesktop theme if it does not exist. To change your sound theme
#: desktop wide, create
#: :file:~/.local/share/sounds/__custom/index.theme` with the
#: contents:

#:     [Sound Theme]

#:     Inherits=name-of-the-sound-theme-you-want-to-use

#: Replace name-of-the-sound-theme-you-want-to-use with the actual
#: theme name. Now all compliant applications should use sounds from
#: this theme.

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

#: If enabled, the OS Window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the OS Window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

# remember_window_position no

#: If enabled, the OS Window position will be remembered so that new
#: instances of kitty will have the same position as the previous
#: instance. If disabled, the OS Window will be placed by the window
#: manager. Note that remembering of position only works if the
#: underlying desktop environment/window manager supports it. It never
#: works on Wayland. See also kitty --position to specify the position
#: when launching kitty.

# enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.

# window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

# draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: borders that separate the window from a neighbor are drawn. Note
#: that setting a non-zero window_margin_width overrides this and
#: causes all borders to be drawn.

# window_margin_width 0

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.

# single_window_margin_width -1

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

# window_padding_width 0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.

# single_window_padding_width -1

#: The window padding to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_padding_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

# placement_strategy center

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges. The value can be one of: top-
#: left, top, top-right, left, center, right, bottom-left, bottom,
#: bottom-right.

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows.

# bell_border_color #ff5a00

#: The color for the border of inactive windows in which a bell has
#: occurred.

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# hide_window_decorations no

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only and titlebar-and-corners can be used
#: to only hide the titlebar and the rounded corners. Whether this
#: works and exactly what effect it has depends on the window
#: manager/operating system. Note that the effects of changing this
#: option when reloading config are undefined. When using titlebar-
#: only, it is useful to also set window_margin_width and
#: placement_strategy to prevent the rounded corners from clipping
#: text. Or use titlebar-and-corners.

# window_logo_path none

#: Path to a logo image. Must be in PNG/JPEG/WEBP/GIF/TIFF/BMP format.
#: Relative paths are interpreted relative to the kitty config
#: directory. The logo is displayed in a corner of every kitty window.
#: The position is controlled by window_logo_position. Individual
#: windows can be configured to have different logos either using the
#: launch action or the remote control
#: <https://sw.kovidgoyal.net/kitty/remote-control/> facility.

# window_logo_position bottom-right

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.

# window_logo_alpha 0.5

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.

